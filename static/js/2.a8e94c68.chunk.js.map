{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/My posts/MyPosts.module.css","components/Profile/My posts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/My posts/Post/Post.jsx","components/Profile/My posts/MyPosts.jsx","components/Profile/My posts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","_React$Component","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","_createClass","key","value","props","React","createElement","Navigate","to","connect","module","exports","profile","descriptionBlock","postsBlock","posts","item","ProfileStatusWithHooks","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileInfo","className","s","src","photos","large","Preloader","Post","message","likesCount","MyPosts","memo","postsElements","_toConsumableArray","reverse","map","p","newPostElement","createRef","text","current","updateNewPostText","ref","newPostText","onClick","addPost","MyPostsContainer","profilePage","dispatch","addPostActionCreator","action","updateNewPostTextActionCreator","Profile","console","log","ProfileContainer","userId","router","params","authorizedId","history","push","getUserProfile","getStatus","Object","assign","compose","id","location","useLocation","navigate","useNavigate","useParams"],"mappings":"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","file":"static/js/2.a8e94c68.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to={\"/Login\"}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__2NRW4\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2ENUK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__ZEfTS\",\"posts\":\"MyPosts_posts__1wpJj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__138wg\"};","import React, {useEffect, useState} from \"react\";\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    // let stateWithSetState = useState(true)    //useState возвращает массив из двух элементов. в первом массиве - само значение State\r\n    // debugger\r\n    // let editMode = stateWithSetState [0] //и мы из этого массива достаем первое значение, то есть значение, которое непосредственно хранится в стейте (в данном случае со старта сидит фалс)\r\n    // let setEditMode = stateWithSetState [1]     //вторым элементов будет сидеть ф-я, которое меняет это одиночное значение editMode\r\n\r\n    // let stateWithSetState = useState(true)\r\n    let [editMode, setEditMode] = useState(false) //useState возвращает массив из двух элементов. первому элементу editMode присваивается первое значение (0), а второму элементу setEditMode присваевается второе значение массива 1.\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {//useEffect - хук, к-й говорит, чтобы закинули в него ф-ю, которую он выполнит когда произойдет отрисовка. потом выполню\r\n        setStatus(props.status)          //засинхрон-ть статус, к-1 хранится в   useState, с теми данными, которые пришли из пропсов\r\n    }, [props.status])         //запускается только тогда, когда будет изменен props.status. мы от него зависим\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true) //setEditMode функция, которая меняет значение editMode\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status) //отправляем новый статус на сервер\r\n    }\r\n\r\n    const onStatusChange = (e) => {        //onStatusChange при каждом напечатывании символа меняется локальный статус....e.currentTarget.value - значение для статуса\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {!editMode &&   //если у нас не editMode, то показ эту дивку со статусом\r\n                <div>\r\n                        <span onDoubleClick={activateEditMode}>\r\n                            {props.status ? props.status : 'type something please'}\r\n                        </span>\r\n                </div>}\r\n            {editMode &&   //если у нас editMode, то показ эту дивку со строкой ввода\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n     return (\r\n        <div>\r\n        {/*<div className={s.profile}>*/}\r\n        {/*    <img src='https://vsegda-pomnim.com/uploads/posts/2022-04/1651036220_20-vsegda-pomnim-com-p-lazurnii-tsvet-morya-foto-20.jpg'/>*/}\r\n        {/*</div>*/}\r\n        <div className={s.descriptionBlock}>\r\n            <img src={props.profile.photos.large}/>\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo\r\n\r\n\r\n\r\n// profile, status, updateStatus","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n\r\n    return  (\r\n        <div className={s.item}>\r\n            <img src={'https://i.pinimg.com/originals/a8/8b/b6/a88bb6c1cbeeafe541d381d6d15d23d1.jpg'}/>\r\n            {props.message}\r\n            <div>\r\n                <span> Like </span> {props.likesCount}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\n\r\nconst MyPosts = React.memo (props => {\r\n    //console.log(\"render gy\")\r\n\r\n    let postsElements = [...props.posts].reverse(). map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        let text = newPostElement.current.value;\r\n        props.updateNewPostText(text);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3> My posts </h3>\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}> Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;\r\n\r\n\r\n//FORM\r\n\r\n//\r\n//\r\n// import React from \"react\";\r\n// import s from './MyPosts.module.css';\r\n// import Post from \"./Post/Post\";\r\n// import {Field} from \"formik\";\r\n//\r\n// const MyPosts = (props) => {\r\n//\r\n//     let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n//     let newPostElement = React.createRef();\r\n//\r\n//     let onAddPost = (values) => {\r\n//         props.addPost(values.newPostText);\r\n//     }\r\n//\r\n//\r\n//     return (\r\n//         <div className={s.postsBlock}>\r\n//             <h3> My posts </h3>\r\n//\r\n//             <div className={s.posts}>\r\n//                 {postsElements}\r\n//             </div>\r\n//             <addNewPostFormRedux onSubmit={onAddPost}/>\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n\r\n//const maxLength10=maxLengthCreator(10)\r\n//\r\n// const addNewPostForm =() =>{\r\n//     return (\r\n//         <form onSubmit={props.handleSubmit}>\r\n//             <div>\r\n//                 <Field component={Textarea} name=\"newPostText\" placeholder={\"Post message\"}\r\n//                 validate={[required,maxLength10]}/>\r\n//             </div>\r\n//             <div>\r\n//                 <button> Add post</button>\r\n//             </div>\r\n//         </form>\r\n//     )\r\n// }\r\n//\r\n// let addNewPostFormRedux=reduxForm({form:\"ProfileAddNewPostForm\"})(addNewPostForm)\r\n//\r\n//\r\n// export default MyPosts;","import React from \"react\";\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redax/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>{(store) => {\r\n//                 let state = store.getState();\r\n//                 let addPost = () => {\r\n//                     store.dispatch(addPostActionCreator());\r\n//                 }\r\n//                 let onPostChange = (text) => {\r\n//                     let action = updateNewPostTextActionCreator(text);\r\n//                     store.dispatch(action);\r\n//                 }\r\n//             return <MyPosts updateNewPostText={onPostChange}\r\n//                 addPost={addPost}\r\n//                 posts={state.profilePage.posts}\r\n//                 newPostText={state.profilePage.newPostText}\r\n//             /> }\r\n//         }</StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts:state.profilePage.posts,\r\n        newPostText:state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost:() => {\r\n            dispatch(addPostActionCreator());\r\n        },\r\n        updateNewPostText: (text) => {\r\n        let action = updateNewPostTextActionCreator(text);\r\n        dispatch(action);\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n\r\n\r\n// const MyPostsContainer = (props) => {\r\n//     let state = props.store.getState();\r\n//\r\n//     let addPost = () => {\r\n//         props.store.dispatch(addPostActionCreator());\r\n//     }\r\n//\r\n//     let onPostChange = (text) => {\r\n//         let action = updateNewPostTextActionCreator(text);\r\n//         props.store.dispatch(action);\r\n//     }\r\n//\r\n//     return (<MyPosts\r\n//         updateNewPostText={onPostChange}\r\n//         addPost={addPost}\r\n//         posts={state.profilePage.posts}\r\n//         newPostText={state.profilePage.newPostText}\r\n//     />)\r\n// }\r\n//\r\n// export default MyPostsContainer\r\n\r\n\r\n\r\n\r\n\r\n//FORM\r\n\r\n\r\n\r\n// import React from \"react\";\r\n// import {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redax/profile-reducer\";\r\n// import MyPosts from \"./MyPosts\";\r\n// import {connect} from \"react-redux\";\r\n//\r\n// let mapStateToProps = (state) => {\r\n//     return {\r\n//         posts:state.profilePage.posts,\r\n//         newPostText:state.profilePage.newPostText\r\n//     }\r\n// }\r\n//\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         addPost:(newPostText) => {\r\n//             dispatch(addPostActionCreator(newPostText));\r\n//         },\r\n//     }\r\n// }\r\n//\r\n// const MyPostsContainer = connect (mapStateToProps, mapDispatchToProps)(MyPosts)\r\n//\r\n// export default MyPostsContainer\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./My posts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props) => {\r\n    console.log(\"profike\")\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n\r\n\r\n\r\n\r\n//\r\n//\r\n// import React from \"react\";\r\n// import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n// import MyPostsContainer from \"./My posts/MyPostsContainer\";\r\n//\r\n//\r\n// const Profile = (props) => {\r\n//     debugger\r\n//     return (\r\n//         <div>\r\n//             <ProfileInfo/>\r\n//             //             <MyPostsContainer store={props.store} />\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redax/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n\r\n        let userId = this.props.router.params.userId;\r\n        if (!userId) {\r\n            userId= this.props.authorizedId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile (userId);\r\n        // setTimeout (() => {\r\n            this.props.getStatus(userId)\r\n        // }, 1000)\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"RENDER PROFILE\")\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    //console.log('mapStateToProps PROFILE')\r\n    return ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedId:state.auth.id, //\r\n    isAuth: state.auth.isAuth //из стейта берем isAuth, чтобы знать авторизованы мы или нет\r\n})};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// let AuthRedirectComponent = withAuthRedirect (ProfileContainer);\r\n//\r\n\r\n//\r\n// let withUrlDataContainerComponent = withRouter (AuthRedirectComponent);\r\n//\r\n// export default connect(mapStateToProps, {getUserProfile}) (withUrlDataContainerComponent);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export function withRouter(Children){\r\n//     return(props)=>{\r\n//\r\n//         const match  = {params: useParams()};\r\n//         return <Children {...props}  match = {match}/>\r\n//     }\r\n// }\r\n//\r\n// class ProfileContainer extends React.Component {\r\n//\r\n//     componentDidMount() {\r\n//         debugger\r\n//         let userId = this.props.match.params.userId;\r\n//         if (!userId) {\r\n//             userId = 2;\r\n//         }\r\n//         debugger\r\n//         axios.get(`https://social-network.samuraijs.com/api/1.0/profile/ + userId`)\r\n//             .then(response => {\r\n//                 this.props.setUserProfile(response.data);\r\n//             });\r\n//     }\r\n//\r\n//     render() {\r\n//         return (\r\n//             <Profile {...this.props} profile={this.props.profile}/>\r\n//         )\r\n//     }\r\n// }\r\n//\r\n// let mapStateToProps = (state) => ({\r\n//     profile: state.profilePage.profile\r\n// });\r\n//\r\n// let withUrlDataContainerComponent = withRouter (ProfileContainer);\r\n//\r\n// export default connect(mapStateToProps, {setUserProfile}) (withUrlDataContainerComponent);\r\n"],"sourceRoot":""}